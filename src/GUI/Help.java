/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

/**
 *
 * @author joker
 */
public class Help extends javax.swing.JFrame {

    /**
     * Creates new form Help
     */
    public Help() {
        initComponents();
        //commandsList.addListSelectionListener(new SharedListSelectionHandler());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructionsList = new javax.swing.JScrollPane();
        commandsList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_explanation = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formLoad(evt);
            }
        });

        commandsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "block", "break", "brush hair", "check", "dodge", "download", "drink", "drop", "go", "hit", "inventory", "kick", "leave", "lights off/on", "look", "open", "pull hair", "punch", "put", "read", "run", "slap", "smell", "speed on/off", "switch on/off", "take", "turn on/off", "use", "war cry", "wear" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        commandsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectChanged(evt);
            }
        });
        instructionsList.setViewportView(commandsList);

        jLabel1.setText("List of Instructions");

        jLabel2.setText("Instruction Explanation:");

        lbl_explanation.setText("jLabel4");

        jLabel4.setText("General tips: ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("- You cannot use instructions except in their appropriate chapters. \nExample: you cannot block a hit except in chapters which some fight exists.\nThat is, not all instructions are applicable in all chapters.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(instructionsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(lbl_explanation))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(456, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instructionsList, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(lbl_explanation))
                .addGap(32, 32, 32)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formLoad(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formLoad
        commandsList.setSelectedIndex(0);
        selectChanged(null);
    }//GEN-LAST:event_formLoad

    private void selectChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectChanged
//        showText(new Integer(commandsList.getSelectedIndex()).toString());
//        showText(commandsList.getSelectedValue().toString());
        String command = commandsList.getSelectedValue().toString();
        if (command.equals("block")) {
            showText("Used to block an enemy's hit. It reduces"
                    + "the effect of the enemy's hit on your hp.");
        } else if (command.equals("dodge")) {
            showText("Used to dodge an enemy's hit. It reduces"
                    + "the effect of the enemy's hit on your hp.");
        } else if (command.equals("download")) {
            showText("use it to download a map or something from network");
        } else if (command.equals("drink")) {
            showText("you can use it drink water from a filled bottle");
        } else if (command.equals("drop")) {
            showText("use it to drop something ");
        } else if (command.equals("hit")) {
            showText("use it to hit with feasts\n"
                    + "	with sword:  strongest hit you have");
        } else if (command.equals("kick")) {
            showText("use it to  make damage on the enemy");
        } else if (command.equals("punch")) {
            showText("use it to  make damage on the enemy");
        } else if (command.equals("slap")) {
            showText("use it to  make damage on the enemy");
        } else if (command.equals("switch on/off")) {
            showText("to control the room lights if you are "
                    + "\nin front of switch");
        } else if (command.equals("turn on/off")) {
            showText("to control the room lights if you are "
                    + "\nin front of switch");
        } else if (command.equals("lights on/off")) {
            showText("to control the room lights if you are in "
                    + "\nfront of switch");
        } else if (command.equals("inventory")) {
            showText("to see what objects you have");
        } else if (command.equals("war cry")) {
            showText("as a heavy fighter you have to use this move\n "
                    + "when you are fighting with mate to keep enemies attention"
                    + "\n to yourself and make weak enemies run away.");
        } else if (command.equals("speed on/off")) {
            showText("To turn you speed on or off so your power"
                    + "\n and speed will be multiplied greatly");
        } else if (command.equals("wear")) {
            showText("use it to wear objects");
        } else if (command.equals("break")) {
            showText("you can use it i fights to do damage");
        } else if (command.equals("read")) {
            showText("use it read some paper");
        } else if (command.equals("run") | command.equals("go")) {
            showText("use it to go to direction north or south "
                    + "\nor west or east");
        } else if (command.equals("look")) {
            showText("use it to have discribtion of your current place");
        } else if (command.equals("brush hair")) {
            showText("use it to brush your hair");
        } else if (command.equals("use")) {
            showText("You can use this object if it’s usable");
        } else if (command.equals("check")) {
            showText("u can use it to check your mail on your laptop");
        } else if (command.equals("leave")) {
            showText("Use to leave the map after you finished it’s mission");
        } else if (command.equals("open")) {
            showText("you can use it to open the laptop, to check your mail");
        } else if (command.equals("pull hair")) {
            showText("Use it to make damage on an enemy by pulling his/her hair");
        } else if (command.equals("put")) {
            showText("use it to leave some object in the place you are in");
        } else if (command.equals("read")) {
            showText("Use to read some object that can be readable");
        } else if (command.equals("smell")) {
            showText("Use it to smell something");
        } else if (command.equals("take")) {
            showText("Use to take something and put something in your inventory");
        }
    }//GEN-LAST:event_selectChanged

    public void showText(String Result) {
        this.lbl_explanation.setText(Result + "\n\n");
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList commandsList;
    private javax.swing.JScrollPane instructionsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_explanation;
    // End of variables declaration//GEN-END:variables
}
